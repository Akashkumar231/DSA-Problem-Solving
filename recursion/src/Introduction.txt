The process in which a function calls itself directly or indirectly is called recursion and the corresponding function is called a recursive function.

A recursive algorithm takes one step toward solution and then recursively call itself to further move. The algorithm stops once we reach the solution.
Since called function may further call itself, this process might continue forever. So it is essential to provide a base case to terminate this recursion process.


What is the base condition in recursion?
A recursive program stops at a base condition. There can be more than one base conditions in a recursion. In the above program, the base condition is when n = 1.\

How a particular problem is solved using recursion?
The idea is to represent a problem in terms of one or more smaller problems, and add one or more base conditions that stop the recursion.

Recursion is a powerful technique that has many applications in computer science and programming. Here are some of the common applications of recursion:

Tree and graph traversal: Recursion is frequently used for traversing and searching data structures such as trees and graphs.
Recursive algorithms can be used to explore all the nodes or vertices of a tree or graph in a systematic way.

Sorting algorithms: Recursive algorithms are also used in sorting algorithms such as quicksort and merge sort.
These algorithms use recursion to divide the data into smaller subarrays or sublists, sort them, and then merge them back together.

Divide-and-conquer algorithms: Many algorithms that use a divide-and-conquer approach, such as the binary search algorithm,
use recursion to break down the problem into smaller subproblems.

Fractal generation: Fractal shapes and patterns can be generated using recursive algorithms.
For example, the Mandelbrot set is generated by repeatedly applying a recursive formula to complex numbers.

Backtracking algorithms: Backtracking algorithms are used to solve problems that involve making a sequence of decisions, where each decision depends on the previous ones.
 These algorithms can be implemented using recursion to explore all possible paths and backtrack when a solution is not found.

Memoization: Memoization is a technique that involves storing the results of expensive function calls and returning the cached result when the same inputs occur again.
Memoization can be implemented using recursive functions to compute and cache the results of subproblems.